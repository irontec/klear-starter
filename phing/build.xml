<?xml version="1.0" encoding="UTF-8"?>
<project name="Testing" basedir="./" default="help">

    <!-- CONFIGURABLE VALUES -->
    <!-- command line switch >> -Dk=/remoteKlear -->
    <property name="klear.base" refid="k" fallback="/opt/klear" />
    <!-- command line switch >> -Da=../web/application -->
    <property name="application.path" refid="a" fallback="../web/application" />
    <!-- command line switch >> -De=development -->
    <property name="application.env" refid="e" fallback="production" />
    <!-- END OF CONFIGURABLE VALUES -->
    
    <!-- Sets the DSTAMP, TSTAMP and TODAY properties -->
    <tstamp />
    
    <property name="build.dir" value="./" />
    
    <exec command="which mysql" outputProperty="progs.mysql" />

    <property name="modelGenerator.path" value="${klear.base}/generator" />
    
    <includepath classpath="${klear.base}/library/Iron/Phing/" />
    
    <taskdef name="configParser" classname="ConfigurationParser" />
    
    <configParser targetProperty="resources.db.params.dbname" outputProperty="db.name" iniFile="${env.PWD}/${application.path}/configs/application.ini" stage="${application.env}" />
    <configParser targetProperty="resources.db.params.username" outputProperty="db.user" iniFile="${env.PWD}/${application.path}/configs/application.ini" stage="${application.env}" />
    <configParser targetProperty="resources.db.params.password" outputProperty="db.pass" iniFile="${env.PWD}/${application.path}/configs/application.ini" stage="${application.env}" />
    <configParser targetProperty="resources.db.params.host" outputProperty="db.host" iniFile="${env.PWD}/${application.path}/configs/application.ini" stage="${application.env}" />
    
    <!-- Crea la tabla inicial de changelog -->
    <target name="init">
        <exec command="${progs.mysql} -h${db.host} -u${db.user} -p${db.pass} ${db.name} &lt; predeploy.sql" dir="${build.dir}" checkreturn="true" />
    </target>
    
    <target name="first-pass-migrate" description="Database Migrations">
        <!-- load the dbdeploy task -->
        <taskdef name="dbdeploy" classname="phing.tasks.ext.dbdeploy.DbDeployTask" />
        <!-- these two filenames will contain the generated SQL to do the deploy and roll it back-->
        <property name="build.dbdeploy.deployfile" value="deploy/scripts/deploy-${DSTAMP}${TSTAMP}.sql" />
        <property name="build.dbdeploy.undofile" value="deploy/scripts/undo-${DSTAMP}${TSTAMP}.sql" />
        <!-- generate the deployment scripts -->
        <dbdeploy url="mysql:host=${db.host};dbname=${db.name}" userid="${db.user}" password="${db.pass}" dir="${build.dir}/deltas" outputfile="${build.dir}/${build.dbdeploy.deployfile}" undooutputfile="${build.dir}/${build.dbdeploy.undofile}" />
        <!-- execute the SQL - Use mysql command line to avoid trouble with large files or many statements and PDO -->
        <exec command="${progs.mysql} -h${db.host} -u${db.user} -p${db.pass} ${db.name} &lt; ${build.dbdeploy.deployfile}" dir="${build.dir}"/>
    </target>
    
    <target name="second-pass-migrate" description="Database Migrations">
        <!-- load the dbdeploy task -->
        <taskdef name="dbdeploy" classname="phing.tasks.ext.dbdeploy.DbDeployTask" />
        <!-- these two filenames will contain the generated SQL to do the deploy and roll it back-->
        <property name="build.dbdeploy.deployfile" value="deploy/scripts/deploy-${DSTAMP}${TSTAMP}.sql" />
        <property name="build.dbdeploy.undofile" value="deploy/scripts/undo-${DSTAMP}${TSTAMP}.sql" />
        <!-- generate the deployment scripts -->
        <dbdeploy url="mysql:host=${db.host};dbname=${db.name}" userid="${db.user}" password="${db.pass}" dir="${build.dir}/deltas" outputfile="${build.dir}/${build.dbdeploy.deployfile}" undooutputfile="${build.dir}/${build.dbdeploy.undofile}" />
        <!-- execute the SQL - Use mysql command line to avoid trouble with large files or many statements and PDO -->
        <exec command="${progs.mysql} -h${db.host} -u${db.user} -p${db.pass} ${db.name} &lt; ${build.dbdeploy.deployfile}" dir="${build.dir}" />
    </target>
    
    <!-- Crea deltas con los cambios en MySQL segun los comentarios de tabla/columna -->
    <target name="generate-db">
        <exec command="php klear-db-generator.php -a ${env.PWD}/${application.path} -e ${application.env}" dir="${modelGenerator.path}" checkreturn="true" passthru="true" />
    </target>
    
    <target name="generate-db-delta">
        <exec command="php klear-db-generator.php -a ${env.PWD}/${application.path} -d ${env.PWD}/${build.dir}/deltas -e ${application.env}" dir="${modelGenerator.path}" checkreturn="true" passthru="true"  />
    </target>
    
    <!-- Crea y Regenera(raw) los Model y Mappers -->
    <target name="generate-models">
        <exec command="php klear-models-mappers-generator.php -a ${env.PWD}/${application.path} -e ${application.env}" dir="${modelGenerator.path}" checkreturn="true" passthru="true" />
    </target>
    
    <!-- Crea y Regenera(raw) los Yamls de klear -->
    <target name="generate-yaml">
        <exec command="php klear-yaml-generator.php -a ${env.PWD}/${application.path} -e ${application.env}" dir="${modelGenerator.path}" checkreturn="true" passthru="true" />
    </target>
    
    <!-- Ejecuta generate-models y generate-yaml -->
    <target name="run-generators" depends="generate-models,generate-yaml"></target>
    
    <!-- Crea una dump completo de la base de datos -->
    <target name="generate-dump">
        <property name="build.dump.dumpFile" value="${build.dir}/dumps/${db.name}-${DSTAMP}-${TSTAMP}.sql" />
        <exec command="mysqldump -h${db.host} -u${db.user} -p${db.pass} ${db.name} &gt; ${build.dump.dumpFile}" dir="${build.dir}" checkreturn="true" passthru="true"/>
        <exec command="echo 'Creado el dump ${db.name}-${DSTAMP}-${TSTAMP}.sql'" dir="${build.dir}" checkreturn="true" passthru="true" />
    </target>
    
    <!-- Crea un dump de los create tables -->
    <target name="generate-dump-schema">
        <property name="build.dumpSchema.dumpFile" value="${build.dir}/dumps/${db.name}-schema-${DSTAMP}-${TSTAMP}.sql" />
        <exec command="mysqldump -d --add-drop-database -h${db.host} -u${db.user} -p${db.pass} --databases ${db.name} | sed 's/ AUTO_INCREMENT=[0-9]*//g' &gt; ${build.dumpSchema.dumpFile}" dir="${build.dir}" checkreturn="true" passthru="true"/>
        <exec command="echo 'Creado el schema ${db.name}-schema-${DSTAMP}-${TSTAMP}.sql'" dir="${build.dir}" checkreturn="true" passthru="true" />
    </target>
    
    <!-- Crea un dump con solo la información de inserts -->
    <target name="generate-dump-data">
        <property name="build.dumpData.dumpFile" value="${build.dir}/dumps/${db.name}-data-${DSTAMP}-${TSTAMP}.sql" />
        <exec command="mysqldump --no-create-info -h${db.host} -u${db.user} -p${db.pass} --databases ${db.name} &gt; ${build.dumpData.dumpFile} " dir="${build.dir}" checkreturn="true" passthru="true"/>
        <exec command="echo 'Creado el data ${db.name}-data-${DSTAMP}-${TSTAMP}.sql'" dir="${build.dir}" checkreturn="true" passthru="true" />
    </target>
    
    <!-- Ejecuta el generate-dump-schema y generate-dump-data -->
    <target name="generate-dump-split" depends="generate-dump-schema,generate-dump-data"></target>
    
    <!-- Migra los deltas al proyecto actual. -->
    <target name="migrate" depends="first-pass-migrate"></target>
    
    <target name="db-change-migrate" depends="first-pass-migrate, generate-db-delta, second-pass-migrate"></target>
    <target name="db-change" description="Database Migration and Model - Yaml generator" depends="db-change-migrate, run-generators"></target>
    
    <!-- REST -->
    <target name="generate-rest-controllers">
        <exec command="php klear-rest-generator.php -a ${env.PWD}/${application.path} -e ${application.env}" dir="${modelGenerator.path}" checkreturn="true" passthru="true" />
    </target>
    
    <target name="help">
        <exec command="echo 'init                      = Crea la tabla inicial de changelog'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'migrate                   = Migra los deltas al proyecto actual.'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'db-change                 = Ejecuta todas la acciones necesarias para integrar nuevos deltas en el proyecto'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'generate-db               = Crea deltas con los cambios en MySQL segun los comentarios de tabla/columna'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'generate-models           = Crea y Regenera los Model y Mappers'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'generate-yaml             = Crea y Regenera los Yamls de klear'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'run-generators            = Ejecuta generate-models y generate-yaml'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'generate-dump             = Crea una dump completo de la base de datos'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'generate-dump-schema      = Crea un dump de los create tables'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'generate-dump-data        = Crea un dump con solo la información de inserts'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'generate-dump-split       = Ejecuta el generate-dump-schema y generate-dump-data'" dir="${build.dir}" passthru="true" />
        <exec command="echo 'generate-rest-controllers = En base a las tablas que tengan el comentario [rest], se creara una controller REST basico.'" dir="${build.dir}" passthru="true" />
    </target>
    
    <target name="tasks" depends="help"></target>

</project>
